{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kilroy-face-twitter \ud83d\udd17 kilroy face for Twitter \ud83d\udc26 Installing \ud83d\udd17 Using pip : pip install kilroy-face-twitter Usage \ud83d\udd17 To run the face server, install the package and run the following command: kilroy-face-twitter This will start the face server on port 10001 by default. Then you can communicate with the server, for example by using this package .","title":"Home"},{"location":"#kilroy-face-twitter","text":"kilroy face for Twitter \ud83d\udc26","title":"kilroy-face-twitter"},{"location":"#installing","text":"Using pip : pip install kilroy-face-twitter","title":"Installing"},{"location":"#usage","text":"To run the face server, install the package and run the following command: kilroy-face-twitter This will start the face server on port 10001 by default. Then you can communicate with the server, for example by using this package .","title":"Usage"},{"location":"usage/","text":"Usage \ud83d\udd17 This package provides an interface to a Twitter bot that complies with the kilroy face API. Prerequisites \ud83d\udd17 You need to create a Twitter app and get the following credentials: consumer_key consumer_secret access_token access_token_secret You need to pass these to the server, either as environment variables, command line arguments or entries in a configuration file. For example, you can do this: export KILROY_FACE_TWITTER_FACE__CONSUMER_KEY = \"Paste your consumer key here\" export KILROY_FACE_TWITTER_FACE__CONSUMER_SECRET = \"Paste your consumer secret here\" export KILROY_FACE_TWITTER_FACE__ACCESS_TOKEN = \"Paste your access token here\" export KILROY_FACE_TWITTER_FACE__ACCESS_TOKEN_SECRET = \"Paste your access token secret here\" Running the server \ud83d\udd17 To run the server, install the package and run the following command: kilroy-face-twitter This will start the face server on port 10001 by default. Then you can communicate with the server, for example by using this package .","title":"Usage"},{"location":"usage/#usage","text":"This package provides an interface to a Twitter bot that complies with the kilroy face API.","title":"Usage"},{"location":"usage/#prerequisites","text":"You need to create a Twitter app and get the following credentials: consumer_key consumer_secret access_token access_token_secret You need to pass these to the server, either as environment variables, command line arguments or entries in a configuration file. For example, you can do this: export KILROY_FACE_TWITTER_FACE__CONSUMER_KEY = \"Paste your consumer key here\" export KILROY_FACE_TWITTER_FACE__CONSUMER_SECRET = \"Paste your consumer secret here\" export KILROY_FACE_TWITTER_FACE__ACCESS_TOKEN = \"Paste your access token here\" export KILROY_FACE_TWITTER_FACE__ACCESS_TOKEN_SECRET = \"Paste your access token secret here\"","title":"Prerequisites"},{"location":"usage/#running-the-server","text":"To run the server, install the package and run the following command: kilroy-face-twitter This will start the face server on port 10001 by default. Then you can communicate with the server, for example by using this package .","title":"Running the server"},{"location":"features/posters/","text":"Posters \ud83d\udd17 Posters are responsible for posting tweets. All implemented posters are described below. BasicPoster \ud83d\udd17 This poster simply uses the Twitter API in most straightforward way possible.","title":"Posters"},{"location":"features/posters/#posters","text":"Posters are responsible for posting tweets. All implemented posters are described below.","title":"Posters"},{"location":"features/posters/#basicposter","text":"This poster simply uses the Twitter API in most straightforward way possible.","title":"BasicPoster"},{"location":"features/processors/","text":"Processors \ud83d\udd17 Processors are a way to handle different types of messages. They are able to convert between internal and external representations of messages. There are multiple types of processors available, each supporting a different type of message: TextOnlyProcessor ImageOnlyProcessor TextAndImageProcessor TextOrImageProcessor TextWithOptionalImageProcessor ImageWithOptionalTextProcessor You can set the processor to use in the initial configuration, but you can't change the type of processor at runtime.","title":"Processors"},{"location":"features/processors/#processors","text":"Processors are a way to handle different types of messages. They are able to convert between internal and external representations of messages. There are multiple types of processors available, each supporting a different type of message: TextOnlyProcessor ImageOnlyProcessor TextAndImageProcessor TextOrImageProcessor TextWithOptionalImageProcessor ImageWithOptionalTextProcessor You can set the processor to use in the initial configuration, but you can't change the type of processor at runtime.","title":"Processors"},{"location":"features/restrictions/","text":"Restrictions \ud83d\udd17 Score modifiers are a way to modify the score of a post given by the scorer. This can be useful to constraint the score to a certain range, or to reduce the score of risky posts. Their usage is optional. All implemented restrictions are listed below. ToxicityRestriction \ud83d\udd17 This restriction uses the Detoxify model to calculate the toxicity of a post. Posts with a toxicity above the configured threshold are rejected. You can configure the toxicity threshold.","title":"Restrictions"},{"location":"features/restrictions/#restrictions","text":"Score modifiers are a way to modify the score of a post given by the scorer. This can be useful to constraint the score to a certain range, or to reduce the score of risky posts. Their usage is optional. All implemented restrictions are listed below.","title":"Restrictions"},{"location":"features/restrictions/#toxicityrestriction","text":"This restriction uses the Detoxify model to calculate the toxicity of a post. Posts with a toxicity above the configured threshold are rejected. You can configure the toxicity threshold.","title":"ToxicityRestriction"},{"location":"features/score-modifiers/","text":"Score modifiers \ud83d\udd17 Score modifiers are a way to modify the score of a post, independent of the score given by the scorer. This can be useful to constraint the score to a certain range, or to reduce the score of risky posts. Their usage is optional. All implemented score modifiers are listed below. ToxicityScoreModifier \ud83d\udd17 This score modifier uses the Detoxify model to calculate the toxicity of a post. The toxicity is then used to modify the score of the post, greatly reducing the score of toxic posts. You can configure the toxicity threshold and reduction factor.","title":"Score modifiers"},{"location":"features/score-modifiers/#score-modifiers","text":"Score modifiers are a way to modify the score of a post, independent of the score given by the scorer. This can be useful to constraint the score to a certain range, or to reduce the score of risky posts. Their usage is optional. All implemented score modifiers are listed below.","title":"Score modifiers"},{"location":"features/score-modifiers/#toxicityscoremodifier","text":"This score modifier uses the Detoxify model to calculate the toxicity of a post. The toxicity is then used to modify the score of the post, greatly reducing the score of toxic posts. You can configure the toxicity threshold and reduction factor.","title":"ToxicityScoreModifier"},{"location":"features/scorers/","text":"Scorers \ud83d\udd17 Scorers are a way to evaluate posts. You give them a tweet, and they return a single number representing the score. All implemented scorers are described below. RelativeLikesScorer \ud83d\udd17 This scorer returns the number of likes a tweet has divided by the number of followers the tweet author has. RelativeRetweetsScorer \ud83d\udd17 This scorer returns the number of retweets a tweet has divided by the number of followers the tweet author has. IRelativempressionsScorer \ud83d\udd17 This scorer returns the number of impressions a tweet has divided by the number of followers the tweet author has.","title":"Scorers"},{"location":"features/scorers/#scorers","text":"Scorers are a way to evaluate posts. You give them a tweet, and they return a single number representing the score. All implemented scorers are described below.","title":"Scorers"},{"location":"features/scorers/#relativelikesscorer","text":"This scorer returns the number of likes a tweet has divided by the number of followers the tweet author has.","title":"RelativeLikesScorer"},{"location":"features/scorers/#relativeretweetsscorer","text":"This scorer returns the number of retweets a tweet has divided by the number of followers the tweet author has.","title":"RelativeRetweetsScorer"},{"location":"features/scorers/#irelativempressionsscorer","text":"This scorer returns the number of impressions a tweet has divided by the number of followers the tweet author has.","title":"IRelativempressionsScorer"},{"location":"features/scrapers/","text":"Scrapers \ud83d\udd17 Scrapers are used to provide a stream of existing posts. They define a source of posts, and a way to retrieve them. All implemented scrapers are described below. TimelineScraper \ud83d\udd17 This is the only implemented scraper. It returns the tweets from the timeline (home feed). So it's important who the bot is following.","title":"Scrapers"},{"location":"features/scrapers/#scrapers","text":"Scrapers are used to provide a stream of existing posts. They define a source of posts, and a way to retrieve them. All implemented scrapers are described below.","title":"Scrapers"},{"location":"features/scrapers/#timelinescraper","text":"This is the only implemented scraper. It returns the tweets from the timeline (home feed). So it's important who the bot is following.","title":"TimelineScraper"}]}